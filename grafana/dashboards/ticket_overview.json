{
  "id": null,
  "uid": "mava-ticket-overview",
  "title": "Mava Tickets",
  "tags": ["mava_tickets_with_customers", "overview"],
  "timezone": "browser",
  "schemaVersion": 37,
  "version": 8,
  "refresh": "5m",
  "time": {
    "from": "now-30d",
    "to": "now"
  },
  "panels": [
    {
      "id": 11,
      "type": "stat",
      "title": "Open Tickets",
      "datasource": {"type": "postgres", "uid": "supabase"},
      "gridPos": {"h": 8, "w": 5, "x": 0, "y": 0},
      "targets": [
        {
          "format": "table",
          "rawSql": "SELECT COUNT(*) AS count FROM mava_tickets_with_customers WHERE status = 'Open';",
          "refId": "A"
        }
      ]
    },
    {
      "id": 12,
      "type": "stat",
      "title": "Pending Tickets",
      "datasource": {"type": "postgres", "uid": "supabase"},
      "gridPos": {"h": 8, "w": 5, "x": 5, "y": 0},
      "targets": [
        {
          "format": "table",
          "rawSql": "SELECT COUNT(*) AS count FROM mava_tickets_with_customers WHERE status = 'Pending';",
          "refId": "A"
        }
      ]
    },
    {
      "id": 13,
      "type": "stat",
      "title": "Waiting Tickets",
      "datasource": {"type": "postgres", "uid": "supabase"},
      "gridPos": {"h": 8, "w": 5, "x": 10, "y": 0},
      "targets": [
        {
          "format": "table",
          "rawSql": "SELECT COUNT(*) AS count FROM mava_tickets_with_customers WHERE status = 'Waiting';",
          "refId": "A"
        }
      ]
    },
    {
      "id": 14,
      "type": "stat",
      "title": "Resolved Tickets",
      "datasource": {"type": "postgres", "uid": "supabase"},
      "gridPos": {"h": 8, "w": 5, "x": 15, "y": 0},
      "targets": [
        {
          "format": "table",
          "rawSql": "SELECT COUNT(*) AS count FROM mava_tickets_with_customers WHERE status = 'Resolved';",
          "refId": "A"
        }
      ]
    },
    {
      "id": 1,
      "type": "stat",
      "title": "Total Tickets",
      "datasource": {"type": "postgres", "uid": "supabase"},
      "gridPos": {"h": 8, "w": 4, "x": 20, "y": 0},
      "targets": [
        {
          "format": "table",
          "rawSql": "SELECT COUNT(*) AS total_mava_tickets_with_customers FROM mava_tickets_with_customers;",
          "refId": "A"
        }
      ]
    },
    {
      "id": 3,
      "type": "timeseries",
      "title": "Created Over Time",
      "datasource": {"type": "postgres", "uid": "supabase"},
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 12},
      "targets": [
        {
          "format": "time_series",
          "rawSql": "SELECT date_trunc('day', created_at) AS time, COUNT(*) AS count FROM mava_tickets_with_customers WHERE created_at IS NOT NULL GROUP BY time ORDER BY time;",
          "refId": "A"
        }
      ]
    },
    {
      "id": 19,
      "type": "timeseries",
      "title": "Closed Over Time",
      "datasource": {"type": "postgres", "uid": "supabase"},
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 20},
      "targets": [
        {
          "format": "time_series",
          "rawSql": "SELECT date_trunc('day', updated_at) AS time, COUNT(*) AS count FROM mava_tickets_with_customers WHERE status IN ('Closed', 'Resolved') AND updated_at IS NOT NULL GROUP BY time ORDER BY time;",
          "refId": "A"
        }
      ]
    },
    {
      "id": 18,
      "title": "Open Tickets",
      "type": "table",
      "datasource": {"type": "postgres", "uid": "supabase"},
      "gridPos": {"h": 12, "w": 24, "x": 0, "y": 28},
      "targets": [
        {
          "format": "table",
          "rawSql": "WITH latest_messages AS (SELECT m.ticket_id, m.content, m.created_at as message_created_at, m.sender, m.from_customer, ROW_NUMBER() OVER (PARTITION BY m.ticket_id ORDER BY m.created_at DESC) as rn FROM mava_messages m WHERE m.is_deleted = false AND m.content IS NOT NULL AND m.content != ''), discord_customers AS (SELECT DISTINCT m.ticket_id, dm.author_id::text as user_id, dm.author_username FROM mava_messages m JOIN discord_messages dm ON m.sender = dm.author_id::text WHERE m.from_customer = true), telegram_customers AS (SELECT DISTINCT m.ticket_id, tm.from_user_id::text as user_id, tm.from_user_username FROM mava_messages m JOIN telegram_messages tm ON m.sender = tm.from_user_id::text WHERE m.from_customer = true) SELECT t.id AS \"Ticket ID\", t.category AS \"Category\", COALESCE(t.customer_name, 'Unknown') AS \"Customer\", t.source_type AS \"Source\", t.assigned_to AS \"Assigned To\", t.created_at AS \"Created\", t.updated_at AS \"Last Updated\", CASE WHEN lm.content IS NOT NULL THEN CASE WHEN LENGTH(lm.content) > 100 THEN SUBSTRING(lm.content, 1, 100) || '...' ELSE lm.content END ELSE 'No messages' END AS \"Latest Message\", lm.message_created_at AS \"Last Message Time\", CASE WHEN t.source_type = 'Discord' THEN dc.user_id WHEN t.source_type = 'Telegram' THEN tc.user_id END AS \"CustomerID\", CASE WHEN t.source_type = 'Discord' AND dc.user_id IS NOT NULL THEN 'https://discord.com/users/' || dc.user_id WHEN t.source_type = 'Telegram' AND tc.user_id IS NOT NULL THEN 'https://t.me/' || tc.user_id ELSE '' END AS \"CustomerURL\" FROM mava_tickets_with_customers t LEFT JOIN latest_messages lm ON t.id = lm.ticket_id AND lm.rn = 1 LEFT JOIN discord_customers dc ON t.id = dc.ticket_id AND t.source_type = 'Discord' LEFT JOIN telegram_customers tc ON t.id = tc.ticket_id AND t.source_type = 'Telegram' WHERE t.status IN ('Open', 'Pending', 'Waiting') ORDER BY t.updated_at DESC LIMIT 50;",
          "refId": "A"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "custom": {
            "displayMode": "table",
            "filterable": true
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Ticket ID"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "title": "Open in Mava Dashboard",
                    "url": "https://dashboard.mava.app/dashboard/ticket?space=653191231792c3d3a69b4946&id=${__value.text}",
                    "targetBlank": true
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Source"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Category"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Customer"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 120
              },
              {
                "id": "links",
                "value": [
                  {
                    "title": "View Profile",
                    "url": "${__data.fields.CustomerURL:raw}",
                    "targetBlank": true
                  }
                ]
              },
              {
                "id": "custom.displayMode",
                "value": "color-text"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Assigned To"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 120
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Created"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 120
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Last Updated"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 120
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Latest Message"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 300
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Last Message Time"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 120
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "CustomerID"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": false
              },
              {
                "id": "custom.width",
                "value": 120
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "CustomerURL"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": false
              },
              {
                "id": "custom.width",
                "value": 200
              }
            ]
          }
        ]
      }
    },
    {
      "id": 10,
      "title": "Most Common Words in Support Tickets",
      "type": "barchart",
      "datasource": {"type": "postgres", "uid": "supabase"},
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 40},
      "targets": [
        {
          "format": "table",
          "rawSql": "WITH words AS (SELECT unnest(string_to_array(lower(regexp_replace(m.content, '[^a-zA-Z0-9\\s]', '', 'g')), ' ')) AS word FROM mava_messages m WHERE m.content IS NOT NULL AND m.content <> '' AND LENGTH(m.content) > 3 AND m.is_deleted = false AND m.created_at >= $__timeFrom() AND m.created_at <= $__timeTo()), filtered_words AS (SELECT word FROM words WHERE LENGTH(word) > 3 AND word NOT IN ('this', 'that', 'with', 'have', 'will', 'from', 'they', 'been', 'were', 'said', 'each', 'which', 'their', 'what', 'about', 'would', 'there', 'could', 'more', 'very', 'than', 'just', 'like', 'only', 'into', 'over', 'also', 'back', 'after', 'use', 'two', 'how', 'our', 'work', 'first', 'well', 'way', 'even', 'new', 'want', 'because', 'any', 'these', 'give', 'day', 'most', 'us', 'hello', 'thanks', 'please', 'issue', 'problem', 'help', 'need', 'can', 'get', 'see', 'know', 'think', 'make', 'time', 'good', 'now', 'here', 'out', 'when', 'come', 'its', 'take')) SELECT word AS \"Word\", COUNT(*) AS \"Frequency\" FROM filtered_words GROUP BY word ORDER BY COUNT(*) DESC LIMIT 20;",
          "refId": "A"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "displayMode": "list",
            "filterable": false,
            "showUnfilled": true
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Word"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "bottom"
              },
              {
                "id": "custom.axisLabel",
                "value": "Words"
              }
            ]
          }
        ]
      },
      "options": {
        "orientation": "vertical",
        "displayMode": "gradient",
        "xTickLabelRotation": 45,
        "xTickLabelSpacing": 0,
        "showValue": "always",
        "groupWidth": 0.7,
        "barWidth": 0.97
      }
    }
  ]
} 