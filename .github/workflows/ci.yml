name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate-config:
    name: Validate Configuration Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate JSON files
        run: |
          echo "üîç Validating JSON files..."
          find . -name "*.json" -type f | while read -r file; do
            echo "Checking: $file"
            if ! jq empty "$file" 2>/dev/null; then
              echo "‚ùå Invalid JSON: $file"
              exit 1
            else
              echo "‚úÖ Valid JSON: $file"
            fi
          done

      - name: Validate YAML files
        run: |
          echo "üîç Validating YAML files..."
          find . -name "*.yml" -o -name "*.yaml" | while read -r file; do
            echo "Checking: $file"
            if ! python -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
              echo "‚ùå Invalid YAML: $file"
              exit 1
            else
              echo "‚úÖ Valid YAML: $file"
            fi
          done

      - name: Check Grafana dashboard structure
        run: |
          echo "üîç Validating Grafana dashboard structure..."
          find grafana/dashboards -name "*.json" -type f | while read -r dashboard; do
            echo "Checking dashboard: $dashboard"
            # Check for required fields (Grafana dashboard structure is flat, not nested under 'dashboard')
            if ! jq -e '.title' "$dashboard" >/dev/null 2>&1; then
              echo "‚ùå Missing title in: $dashboard"
              exit 1
            fi
            if ! jq -e '.panels' "$dashboard" >/dev/null 2>&1; then
              echo "‚ùå Missing panels in: $dashboard"
              exit 1
            fi
            # Check if it's a valid Grafana dashboard (has required fields)
            if ! jq -e '.id' "$dashboard" >/dev/null 2>&1; then
              echo "‚ùå Missing id field in: $dashboard"
              exit 1
            fi
            echo "‚úÖ Valid dashboard structure: $dashboard"
          done

  docker-build:
    name: Test Docker Build
    runs-on: ubuntu-latest
    needs: validate-config
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          echo "üê≥ Building Docker image..."
          docker --version
          docker compose version || docker-compose version
          docker build -t mava-grafana:test .

      - name: Test Docker image
        run: |
          echo "üß™ Testing Docker image..."
          # Start container in background
          docker run -d --name test-grafana \
            -e GRAFANA_ADMIN_PASSWORD=test123 \
            -p 3000:3000 \
            mava-grafana:test
          
          # Wait for Grafana to start
          echo "‚è≥ Waiting for Grafana to start..."
          timeout 60 bash -c 'until curl -s http://localhost:3000/api/health; do sleep 2; done'
          
          # Test health endpoint
          if curl -s http://localhost:3000/api/health | jq -e '.database == "ok"'; then
            echo "‚úÖ Grafana health check passed"
          else
            echo "‚ùå Grafana health check failed"
            docker logs test-grafana
            exit 1
          fi
          
          # Cleanup
          docker stop test-grafana
          docker rm test-grafana

  docker-compose-test:
    name: Test Docker Compose
    runs-on: ubuntu-latest
    needs: validate-config
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Docker Compose plugin
        run: |
          sudo apt-get update
          # Try to install docker-compose-plugin, fallback to legacy docker-compose if not available
          if ! sudo apt-get install -y docker-compose-plugin; then
            echo "docker-compose-plugin not available, installing legacy docker-compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          docker --version
          docker compose version || docker-compose version

      - name: Create test environment file
        run: |
          cp env.example .env
          echo "GRAFANA_ADMIN_PASSWORD=test123" >> .env
          echo "SUPABASE_URL=http://localhost:54321" >> .env
          echo "SUPABASE_SERVICE_KEY=test-key" >> .env

      - name: Test Docker Compose (Grafana only)
        run: |
          echo "üß™ Testing Docker Compose setup..."
          docker compose up -d grafana
          
          # Wait for services to start
          echo "‚è≥ Waiting for services to start..."
          sleep 30
          
          # Check if Grafana is running
          if curl -s http://localhost:3000/api/health; then
            echo "‚úÖ Grafana is running"
          else
            echo "‚ùå Grafana failed to start"
            docker compose logs grafana
            exit 1
          fi
          
          # Cleanup
          docker compose down -v

      - name: Test Docker Compose (with Prometheus)
        run: |
          echo "üß™ Testing Docker Compose with Prometheus..."
          docker compose --profile with-prometheus up -d
          
          # Wait for services to start
          echo "‚è≥ Waiting for services to start..."
          sleep 45
          
          # Check if both services are running
          if curl -s http://localhost:3000/api/health && curl -s http://localhost:9090/-/healthy; then
            echo "‚úÖ Both Grafana and Prometheus are running"
          else
            echo "‚ùå Services failed to start"
            docker compose logs
            exit 1
          fi
          
          # Cleanup
          docker compose down -v

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install linting tools
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          sudo wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          sudo chmod +x /usr/local/bin/hadolint

      - name: Check shell scripts
        run: |
          echo "üîç Checking shell scripts..."
          find . -name "*.sh" -type f -exec shellcheck {} +

      - name: Check Dockerfile
        run: |
          echo "üîç Checking Dockerfile..."
          hadolint Dockerfile --ignore DL3018

      - name: Check file permissions
        run: |
          echo "üîç Checking file permissions..."
          find . -name "*.sh" -type f ! -perm -111 -exec echo "‚ùå Shell script not executable: {}" \; -exec exit 1 \;
          echo "‚úÖ All shell scripts are executable"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check README exists and has content
        run: |
          if [ ! -f "README.md" ]; then
            echo "‚ùå README.md is missing"
            exit 1
          fi
          if [ ! -s "README.md" ]; then
            echo "‚ùå README.md is empty"
            exit 1
          fi
          echo "‚úÖ README.md exists and has content"

      - name: Check deployment documentation
        run: |
          if [ ! -f "DEPLOYMENT.md" ]; then
            echo "‚ùå DEPLOYMENT.md is missing"
            exit 1
          fi
          if [ ! -s "DEPLOYMENT.md" ]; then
            echo "‚ùå DEPLOYMENT.md is empty"
            exit 1
          fi
          echo "‚úÖ DEPLOYMENT.md exists and has content"

      - name: Check environment example
        run: |
          if [ ! -f "env.example" ]; then
            echo "‚ùå env.example is missing"
            exit 1
          fi
          # Check for required environment variables
          required_vars=("GRAFANA_ADMIN_PASSWORD" "SUPABASE_URL" "SUPABASE_SERVICE_KEY")
          for var in "${required_vars[@]}"; do
            if ! grep -q "^#*$var=" env.example; then
              echo "‚ùå Missing required environment variable: $var"
              exit 1
            fi
          done
          echo "‚úÖ env.example has all required variables"

  railway-deployment-check:
    name: Railway Deployment Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Railway configuration
        run: |
          if [ ! -f "railway.json" ]; then
            echo "‚ùå railway.json is missing"
            exit 1
          fi
          
          # Validate railway.json structure
          if ! jq -e '.deploy.healthcheckPath' railway.json >/dev/null 2>&1; then
            echo "‚ùå Missing healthcheckPath in railway.json"
            exit 1
          fi
          
          if ! jq -e '.deploy.healthcheckTimeout' railway.json >/dev/null 2>&1; then
            echo "‚ùå Missing healthcheckTimeout in railway.json"
            exit 1
          fi
          
          echo "‚úÖ Railway configuration is valid"

      - name: Check Dockerfile for Railway compatibility
        run: |
          # Check if EXPOSE directive exists
          if ! grep -q "^EXPOSE" Dockerfile; then
            echo "‚ùå Dockerfile missing EXPOSE directive"
            exit 1
          fi
          
          # Check if PORT environment variable is handled
          if ! grep -q "PORT" Dockerfile; then
            echo "‚ö†Ô∏è Dockerfile should handle PORT environment variable for Railway"
          fi
          
          echo "‚úÖ Dockerfile appears Railway-compatible" 